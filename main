general = {}
function general.check_property(obj,prop)
   obj = obj or nil
   prop = prop or nil
return pcall(function() return obj[prop] end)
end
function general.get_position(obj)
   obj = obj or nil
   if obj:IsA("Part") then
      return obj.Position
   end
   if obj:IsA("MeshPart") then
      return obj.Position
   end
end
function general.set_position(obj,position)
obj.Position = position
return position
end
function general.get_players()
   players = {}
   for i,v in pairs(game:GetService("Players"):GetPlayers())do
      table.insert(players,v.Name)
   end
   return players
end
function general.get_player_characters()
   characters = {}
   for i,v in pairs(game:GetService("Players"):GetPlayers())do
      table.insert(characters,v.Character)
   end
   return characters 
end
function general.set_upvalue(func,index,value)
   func = func or nil
   index = index or 1
   value = value or nil
for i,v in pairs(getgc(false)) do
if debug.getinfo(v).name == func then
debug.setupvalue(v,index,value)
end
end 
end
function general.workspace()
   return game:GetService("Workspace")
end
function general.players()
    return game:GetService("Players")
 end
 function general.lighting()
    return game:GetService("Lighting")
 end
 function general.http()
    return game:GetService("HttpService")
 end
 function general.coregui()
     return game:GetService("CoreGui")
  end
  function general.replicated()
     return game:GetService("ReplicatedStorage")
  end
  function general.uis()
    return game:GetService("UserInputService")
 end
 function general.replicatedfi()
return game:GetService("ReplicatedFirst")
end
 function general.player()
return game:GetService("Players").LocalPlayer
 end
 function general.character()
return game:GetService("Players").LocalPlayer.Character
end
 function general.get_children(obj)
   obj = obj or nil
 return obj:GetChildren()
end
function general.get_descendants(obj)
   obj = obj or nil
   return obj:GetDescendants()
  end
  function general.fifich(obj,item)
   obj = obj or nil
   item = item or nil
     return obj:FindFirstChild(item)
  end
  function general.fifide(obj,item)
   obj = obj or nil
   item = item or nil
     for i,v in pairs(item:GetDescendants()) do
        if v.Name == item then
           return v
        end
     end
  end
  function general.notify(text,time)
   text = text or ""
   time = time or 1
      local hint = Instance.new("Hint",game:GetService("CoreGui"))
      hint.Text = text
      wait(time)
      hint:Destroy()
  end
  function general.commands()
     warn("check_property(<instance> path,<property> string)")
     warn("get_position(<instance> path)")
     warn("set_position(<instance> path,<position> vector3")
     warn("get_players(nil)")
     warn("get_player_characters(nil)")
     warn("set_upvalue(<function> string, <index> int, <>)")
     warn("workspace(nil)")
     warn("players(nil)")
     warn("lighting(nil)")
     warn("http(nil)")
     warn("coregui(nil)")
     warn("replicatedst(nil)")
     warn("replicatedfi(nil)")
     warn("uis(nil)")
     warn("player(nil)")
     warn("character(nil)")
     warn("get_children(<instance> path)")
     warn("get_descendants(<instance> path)")
     warn("fifich(<instance> path,<instance> string)")
     warn("fifide(<instance> path,<instance> string)")
     warn("notify(<text> string,<time> int)")
     warn("commands(nil)")
  end
return general
